Git 사용법

# git 설치
- https://git-scm.com 설치
- 설치 시 [Configuring the line ending conversions]에서 2번째 선택
- 설치 후 cmd / git bash에서 [> git] 입력하여 명령어 출력 확인

# 사용자 등록
- 버전 배포 시 사용자 정보 출력(최초 1회 설정)
- [> git config --global user.name "이름"]
- [> git config --global user.email "이메일"]
- [> git config --global --list] : 설정 정보 확인

# 현재 디렉토리를 git 저장소로 등록
- [> git init]

# 저장소 복제
- [> git clone (저장소 url)]

# git 변경 사항 확인
- [> git status]
- [> git status -s] / [> git status --short] : 간단한 변경 내용 출력
  *. 출력 결과 보는 법
  (staging area 상태/working tree 상태)
  > git status -s
   M f1.txt => staged 상태가 아님/ 수정된 상태
  MM f2.txt => staged 상태 / 수정된 상태(staged 상태에서 또 수정함)
  A  f3.txt => staged 상태 / 새로 추가된 파일
  ?? f4.txt => 아직 추적되지 않는 파일(새 파일)
  M  f5.txt => staged 상태 / 수정된 상태

# git 변경 흐름
- f.txt --(add)--> stage --(commit)--> repository

# 파일을 staging 영역에 추가/반영
- [> git add (파일)]
- [> git add *]

# 파일을 staging 영역에서 제거(add 취소)
- [> git rm --cached (파일)]
 
# stage 내용 repository에 반영
- [> git commit]
- [> git commit -m "메시지(로그)"]

# 지역 branch 변경 사항을 원격 branch에 반영
- [> git push origin (branch 명)]

# git 수정 정보 확인
- [> git log]
- [> git log -p] : 로그에서 출력되는 버전 간의 차이점 출력
- [> git diff (버전 ID)..(버전2 ID)] : 버전 간의 차이점 비교 출력
- [> git diff] : add 전의 파일에 대하여 변경 사항 출력

# 변경 사항 되돌리기(commit 취소)
- [> git reset --hard (버전 ID)] : 버전 ID 상태로 돌아감
- [> git revert (버전 ID)] : 버전 ID 내용을 취소하고 새로운 버전을 생성함

# Gssh key 생성 및 Github 등록
1. [> ssh-keygen -t rsa -b 4096 -C "email주소"]
2. [> cat ~/.ssh/id_rsa.pub]
3. 출력 결과를 [github settings > ssh keys]에 입력
4. [> ssh git@github.com] 입력하여 등록 확인

# branch 목록 출력
- [> git branch] : 지역 브랜치 목록 출력
- [> git branch -r] : 원격 브랜치 목록 출력
- [> git branch -a] : 지역, 원격 브랜치 목록 출력

# branch 생성
- [> git branch (branch 명)]
- [> git checkout -b (branch 명)] : branch 생성 및 이동

# branch 변경
- [> git checkout (이동할 branch 명)]



